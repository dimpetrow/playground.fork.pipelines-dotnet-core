# ASP.NET

# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
# - master
- none

pool:
  vmImage: 'windows-latest'

# variables:
#   solution: '**/*.csproj'
#   buildPlatform: 'Any CPU'
#   buildConfiguration: 'Release'

steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Azure subscription 1(4c0f7d2c-780c-4f06-9877-efbc70ecf40d)'
    KeyVaultName: 'dp-playground-kv'
    SecretsFilter: 'terraform-asb-ns-publisher-app-cert-fromtf'
    RunAsPreJob: false

- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'Azure subscription 1(4c0f7d2c-780c-4f06-9877-efbc70ecf40d)'
    KeyVaultName: 'dp-playground-kv'
    SecretsFilter: 'terraform-asb-ns-consumer-app-cert-fromtf'
    RunAsPreJob: false

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      New-Item -Path .\pub -ItemType Directory
      New-Item -Path .\sub -ItemType Directory
      New-item $(System.DefaultWorkingDirectory)\pub\cert_fromazpipelines.cer
      New-item $(System.DefaultWorkingDirectory)\sub\cert_fromazpipelines.cer
      Set-Content $(System.DefaultWorkingDirectory)\pub\cert_fromazpipelines.cer $(terraform-asb-ns-publisher-app-cert-fromtf)
      Set-Content $(System.DefaultWorkingDirectory)\sub\cert_fromazpipelines.cer $(terraform-asb-ns-consumer-app-cert-fromtf)
      
      $kvSecretBytes = [System.Convert]::FromBase64String("$(terraform-asb-ns-publisher-app-cert-fromtf)")
      $pfxPathRawBytes = "$(System.DefaultWorkingDirectory)" + "\pub\MyCert_RawBytes.pfx"
      [System.IO.File]::WriteAllBytes($pfxPathRawBytes, $kvSecretBytes)
      
      $kvSecretStr = [System.Convert]::ToBase64String($kvSecretBytes)
      New-item $(System.DefaultWorkingDirectory)\pub\MyCert_KvSecretToBytesArrayAndBack.cer
      Set-Content $(System.DefaultWorkingDirectory)\pub\MyCert_KvSecretToBytesArrayAndBack.cer $kvSecretStr

      $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      $certCollection.Import($kvSecretBytes,$null,[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
      $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12)
      $pfxPath = "$(System.DefaultWorkingDirectory)" + "\pub\MyCert.pfx"
      [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)
      
      $protectedCertificateStr = [System.Convert]::ToBase64String($protectedCertificateBytes)
      New-item $(System.DefaultWorkingDirectory)\pub\MyCert_ProtectedCertificateToBytesArrayAndBack.cer
      Set-Content $(System.DefaultWorkingDirectory)\pub\MyCert_ProtectedCertificateToBytesArrayAndBack.cer $protectedCertificateStr


- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      pub\**
      sub\**
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Azure-App-Registration'
    OverWrite: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'